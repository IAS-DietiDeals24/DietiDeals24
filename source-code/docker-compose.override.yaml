# Development Docker Compose file

version: '3.8'

name: dietideals24-devcompose

services:

    # Update this to the name of the service you want to work with in your docker-compose.yml file
    backend: # Note: we only override the backend service
        container_name: dietideals24-backend-dev

        # Uncomment if you want to override the service's Dockerfile to one in the .devcontainer 
        # folder. Note that the path of the Dockerfile and context is relative to the *primary* 
        # docker-compose.yml file (the first in the devcontainer.json "dockerComposeFile"
        # array). The sample below assumes your primary file is in the root of your project.
        build: # override the backend configs to build from our src code folder's Dockerfile
            context: ./Server/backend/
            dockerfile: dev-Dockerfile

        environment:
            SONAR_TOKEN: ${SONAR_TOKEN}

        # Update this to wherever you want VS Code to mount the folder of your project
        # volumes:
        #    - ..:/myHostDir/DietiDeals24:cached  # mount our local backend folder to the dev container as its workspace folder

        ports:
            - ${DEV_BACKEND_PORT:-55511}:8080 # Mappa la porta 8080 del container con ${DEV_BACKEND_PORT} (default: 55511) nell'host (http://localhost:${DEV_BACKEND_PORT}/ ci farà accedere all'app)

        # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
        # cap_add:
        #   - SYS_PTRACE
        # security_opt:
        #   - seccomp:unconfined
        
        # Overrides default command so things don't shut down after the process ends.
        command: /bin/sh -c "while sleep 1000; do :; done"

    backend-database:
        container_name: dietideals24-backend-postgresDB-dev

    pgadmin:
        container_name: dietideals24-pgAdmin4-dev
        image: dpage/pgadmin4:8.9
        depends_on:
            backend-database:
                condition: service_healthy
            sonarqube-database:
                condition: service_healthy
        restart: unless-stopped
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@dd24.com} # default: admin@dietideals24.ias
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin} # default: admin
        volumes:
            - ./Server/database/servers.json:/pgadmin4/servers.json
            - pgadmin_data:/var/lib/pgadmin
        ports:
            - ${PGADMIN_PORT:-55512}:80 # Mappa la porta 80 del container con ${PGADMIN_PORT} (default: 55512) nell'host (http://localhost:${PGADMIN_PORT}/ ci farà accedere all'app)
        networks:
            - backendNetwork

    sonarqube:
        image: sonarqube:10.6-community
        container_name: dietideals24-sonarqube-dev
        depends_on:
            sonarqube-database:
                condition: service_healthy
        environment:
            SONAR_JDBC_URL: jdbc:postgresql://sonarqube-database:5432/${SONAR_JDBC_DB:-sonarqube} # default: sonarqube
            SONAR_JDBC_USERNAME: ${SONAR_JDBC_USERNAME:-sonar} # default: sonar
            SONAR_JDBC_PASSWORD: ${SONAR_JDBC_PASSWORD:-sonar} # default: sonar
        volumes:
            - sonarqube_data:/opt/sonarqube/data
            - sonarqube_extensions:/opt/sonarqube/extensions
            - sonarqube_logs:/opt/sonarqube/logs
        ports:
            - ${SONAR_PORT:-55513}:9000 # Mappa la porta 9000 del container con ${SONAR_PORT} (default: 55513) nell'host (http://localhost:${SONAR_PORT}/ ci farà accedere all'app)
        networks:
            - backendNetwork

    sonarqube-database:
        container_name: dietideals24-sonarqube-postgresDB-dev
        image: postgres:16.3 # Immagine di Postgres già pronta
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${SONAR_JDBC_DB:-sonarqube} # default: sonarqube
            POSTGRES_USER: ${SONAR_JDBC_USERNAME:-sonar} # default: sonar
            POSTGRES_PASSWORD: ${SONAR_JDBC_PASSWORD:-sonar} # default: sonar
        healthcheck: # Definisce la condizione di "healthcheck"
            test: ["CMD", "pg_isready", "-U", "${SONAR_JDBC_USERNAME:-sonar}", "-d", "${SONAR_JDBC_DB:-sonarqube}"]
            interval: 15s
            timeout: 15s
            retries: 5
        volumes:
            - sonarqube_database_data:/var/lib/postgresql/data
        networks:
            - backendNetwork

volumes:
    pgadmin_data:
    sonarqube_data:
    sonarqube_extensions:
    sonarqube_logs:
    sonarqube_database_data: